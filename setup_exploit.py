import subprocess


class MissingMSFModule(Exception):
    """
    Raises when MSF Module failed to load or is missing
    """


def create_pattern(length: int) -> str:
    try:
        pattern = subprocess.check_output(
            ["/usr/bin/msf-pattern_create", "-l", f"{length+400}"]).decode()
        if "No exact matches" in pattern:
            return -1
        return pattern
    except FileNotFoundError:
        raise MissingMSFModule("msf-pattern_create was not found")


def offset_pattern(length: int, query: str) -> int:
    try:
        offset = int(subprocess.check_output(
            ["/usr/bin/msf-pattern_offset", "-l", f"{length}", "-q", f"{query}"]).decode().split('offset ')[1].split('\n')[0])
        return offset
    except FileNotFoundError:
        raise MissingMSFModule("msf-pattern_offset was not found")


def all_chars() -> bytes:
    all_chars_hex = b""
    for x in range(0, 256):
        all_chars_hex += bytes("\\x"+"{:02x}".format(x), encoding="utf8")

    return all_chars_hex


def compare(allowed: bytes, all: bytes) -> bytes:
    disallowed = ""
    for i in all:
        if i not in allowed:
            disallowed += i

    return disallowed.encode()


def check_format(bad_chars: str) -> bool:
    if "\\x" not in bad_chars:
        return False

    if len(bad_chars) > 4 or len(bad_chars) < 4:
        return False

    return True


def little_endian(string: str) -> str:
    string_list = []
    for i in range(1, len(string), 2):
        string_list.append(f"{string[i-1]}{string[i]}")
    return ''.join(reversed(string_list))
